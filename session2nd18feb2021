open class bank   //Create 3 sub class of bank SBI,BOI,ICICI all 4 should have method called getDetails which provide there specific details like rateofinterest etc,print details of every bank
 {
    
   open fun getDetails(roi: Int,name :String,location:String) 
   {
      
    }
}

class SBI(): bank() {
   override fun getDetails(roi: Int,name :String,location:String) {
        println("$name has rate of interest  $roi and located in $location")
    }
}

class BOI(): bank() {
 override fun getDetails(roi: Int,name :String,location:String) {
        println("$name has rate of interest  $roi and located in $location")
    }
}

class ICICI(): bank() {
  override fun getDetails(roi: Int,name :String,location:String) {
        println("$name has rate of interest $roi and located in $location")
    }
}

fun main(args:Array<String>){
  
    SBI().getDetails(12,"SBI","noida")
     BOI().getDetails(11,"BOI","agra")
     ICICI().getDetails(10,"ICICI","meerut")
}
//-------------------------------------------------------------------------------------------------------------
 /*Write a single program for following operation using overloading
  A) Adding 2 integer number
  B) Adding 2 double
  D) multiplying 2 int
  E) concate 2 string
  F) Concate 3 String*/
  
class Operation{
    
    fun sum(a:Int, b:Int){
        println("Sum($a,$b) = ${a+b}")
    }

     fun sum(a:Double, b:Double){
        println("Sum($a,$b) = ${a+b}")
    }

   fun sum(a:Integer, b:Integer){
        println("Sum($a,$b) = ${a.toInt() *b.toInt()}")
    }
fun sum(a:String, b:String){
        println("Sum($a,$b) = ${a+b}")
    }
fun sum(a:String, b:String,c:String){
        println("Sum($a,$b,$c) = ${a+b+c}")
    }  
   
}


fun main(args:Array<String>){
   
    val operation = Operation()

    
    operation.sum(10,20)
operation.sum(10.1,20.2)
operation.sum(Integer(10),Integer(20))
operation.sum("shoaib","Khan")
operation.sum("shoaib","Khan","TTN")
}


//--------------------------------------------------------------------------------------------------------------

fun main()   //6. Write a program to create mutable list of Integer. replace the second item in the list with new value. Print the list value.
 {

    val num = mutableListOf(12,22,33,44,55,66,77,88,99)
    println("The list contains ${num}")
    num.set(1,100)
    println("The list contains ${num} after replacement")

}
//-------------------------------------------------------------------------------------------------------------------------------------
fun main(args: Array<String>) //8. Write a program to create HasSet. print all the value.
{  
    var hashSet = HashSet<String>(4) 
    hashSet.add("ravi")  
    hashSet.add("ramesh")  
    hashSet.add("manish")  
    hashSet.add("naveen")  
    hashSet.add("ravi")   
   for (element in hashSet)  
        println("{$element} is HashSet value")  
          
}  
//------------------------------------------------------------------------------------------------------------------------
//7. Write a program to create mutable map. print all the value and key of map
fun main()

 {
    val numbersMap = mutableMapOf("ravi" to 25, "ramesh" to 20, "rajiv" to 30)
println("keys are "+numbersMap.keys)
println("values are "+numbersMap.values) 
}
//-----------------------------------------------------------------------------------------------------------------
//1.Write a program to print your Firstname,LastName & age using init 

class Details{
    companion object{
        val name="shoaib"
        val Lname="khan"
        val age="24"
    }
      
    init{
        println(Details.age)
        println(Details.Lname)
        println(Details.name)
    
}
}
fun main()
{
  val j=Details()
}
//--------------------------------------------------------------------------------------------------
/*5. Write a function which take marks as an argument and return the the grade as follows:
marks between 50 to 60 , return “Good”
marks between 60 to 70, return “Very Good”
marks between 70 to  80, return “Excellent”
marks between  80 to 100, return “Rockstar”*/


class call{
    fun G(marks: Int): String
{
    return when(marks){
       in 50..60 -> ("good") 
       in 61..70 -> ("very good") 
        in 71..80 ->("Excellent")
        in 81..100 ->("Rockstar")
         else -> ("error")
    }
}
    
}
fun main(args: Array<String>)
{
    var p=call()
    
    print(p.G(args[0].toInt()))
}

//---------------------------------------------------------------------------
//4. Create Kotlin classes having suitable attributes for Library management system.Use OOPs concepts in your design.Also try to use interfaces and abstract classes.

interface FunctionsDelegate{

fun issueBook(subject: String){}
fun submitBook(subject: String){}

}

var id=1
abstract class Library(){
var record =HashMap<Int,String>()
val availablebooks= mutableMapOf<String,Int>(Pair("Maths",5),Pair("English",5),Pair("Science",3))
}

class Student(name:String):FunctionsDelegate,Library(){

init{
record[id]=name
id+=1
println(record)
}
override fun issueBook(subject:String){
if(availablebooks[subject]!! <= 0){
println("Book Not available")
}
else{
availablebooks[subject]= availablebooks[subject]!!-1
println("${subject} book issued successfully")
}
}
override fun submitBook(subject: String) {
availablebooks[subject] = availablebooks[subject]!! + 1
println("${subject} book returned successfully")
}
}

fun main()
{
    
  Student("Shoaib").issueBook("Maths")
    Student("ravi").issueBook("English")
}
